===============================
Day 3 - 3 Writing Kernel Fuzzer
===============================

Below is the PowerPoint for this section.

:download:`Designing a Fuzzer PowerPoint<media/day3/designing_a_fuzzer.pptx>` 

Activities
----------

Here is the PowerPoint pertaining to the activities for this section as 
well as C code (*basic_fuzzer.c*) relating to the PowerPoint.

:download:`Writing Simple syscall Fuzzer PowerPoint <media/day3/writing_simple_syscall_fuzzer.pptx>` 

::

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <time.h>
    #include <sys/wait.h>

    int main() {

            FILE *fp;
            int seed, i, pid, status;
            int eax, ebx, ecx, edx, esi, edi;

            // loop forever
            while (1) {

                    // generate a random seed
                    seed = time(0);
                    srand(seed);

                    // log seed to disk
                    fp = fopen("/home/student/log.txt", "a");
                    fprintf(fp, "Current seed: %d\n", seed);
                    fclose(fp);
                    sync();


                    // loop 1,000,000 times
                    for (i=0; i<1000000; i++) {

                            // generate random register values
                            eax = rand() % 338; // syscall number
                            ebx = rand();
                            ecx = rand();
                            edx = rand();
                            esi = rand();
                            edi = rand();

                            // output information
                            printf("syscall(%x, %x, %x, %x, %x, %x);\n",
                                    eax, ebx, ecx, edx, esi, edi);

                            // fork a child process
                            if (pid = fork()) {

                                    // wait on the child to exit
                                    waitpid(pid, &status, 0);

                            } else {

                                    // perform the system call
                                    syscall(eax, ebx, ecx, edx, esi, edi);

                            }

                    }

            }

    }
