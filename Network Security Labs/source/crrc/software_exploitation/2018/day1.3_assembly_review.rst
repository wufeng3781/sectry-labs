=========================
Day 1 - 3 Assembly Review
=========================

Below is the download link for the Assembly Review PowerPoint.

:download:`Assembly Review PowerPoint<media/day1/assembly_review.pptx>` 

Activites
---------

These are the PowerPoints for the activities portion of this section.

:download:`ASEMU PowerPoint<media/day1/asemu.pptx>` 

:download:`Hello World  PowerPoint<media/day1/hello_world.pptx>` 

Below is code from the two activities above, properly labeled on their first line.

::

    #asemu basic
    mov             eax, 0x41414141
    mov             ax, 1
    inc             ax
    mov             ebx, eax
    mov             ecx, ebx
    add             ebx, 2
    add             ecx, 3
    dec             ecx
    push    ecx
    push    ebx
    push    eax
    pop             ecx
    pop             ebx
    pop             eax

::

    #asemu func
        main:
        push    ebp
        mov             ebp, esp

        call    do_math

        mov             esp, ebp
        pop             ebp
        ret

    do_math:
        push    ebp
        mov             ebp, esp

        sub             esp, 12

        push    20
        push    10
        call    sum
        add             esp, 8
        mov             [ebp - 4], eax

        push    40
        push    30
        call    sum
        add             esp, 8
        mov             [ebp - 8], eax

        push    [ebp - 8]
        push    [ebp - 4]
        call    product
        add             esp, 8
        mov             [ebp - 12], eax

        mov             eax, [ebp - 12]

        mov             esp, ebp
        pop             ebp
        ret

        sum:
        push    ebp
        mov             ebp, esp

        sub             esp, 4

        mov             eax, [ebp + 8]
        mov             ebx, [ebp + 12]

        mov             [ebp - 4], eax
        add             [ebp - 4], ebx

        mov             eax, [ebp - 4]

        mov             esp, ebp
        pop             ebp
        ret

    product:
        ;prologue
        push    ebp
        mov             ebp, esp

        sub             esp, 4

        mov             eax, [ebp + 8]
        mov             ebx, [ebp + 12]

        mul             ebx
        mov             [ebp - 4], eax

        mov             eax, [ebp - 4]

        mov             esp, ebp
        pop             ebp
        ret
           

::

    ; 
    ; Hello World example code
    ;       (using printf from libc)
    ;
    ; Andrew Kramer and Josh Pauli
    ;
    ; You are free to use, modify, and redistribute this code
    ; at any time for any purpose.
    ;

    segment .data

            ; Put our string in the global data segment
            my_msg  db      "Hello world",10,0

    segment .text

            global main
            extern printf

    main:
            push    ebp
            mov             ebp, esp

            ; push the pointer to the message onto the stack (arg1)
            ; call the printf function
            ; remove it from the stack afterwards

            ; essentially... printf("Hello world\n");

            push    my_msg
            call    printf
            add             esp, 4

            mov             esp, ebp
            pop             ebp
            ret

::

    ; 
    ; Hello World example code
    ;       (using system calls)
    ;
    ; Andrew Kramer and Josh Pauli
    ;
    ; You are free to use, modify, and redistribute this code
    ; at any time for any purpose.
    ;

    segment .data

            ; Put our string in the global data segment
            my_msg  db      "Hello world",10,0

    segment .text

            global main

    main:
            push    ebp
            mov             ebp, esp

            ; Setup a system call to output the string
            mov             eax, 4          ; SYS_write
            mov             ebx, 1          ; STDOUT
            mov             ecx, my_msg     ; pointer to the string
            mov             edx, 12         ; string length
            int             0x80            ; interupt the CPU, let the kernel handle it

            mov             esp, ebp
            pop             ebp
            ret
